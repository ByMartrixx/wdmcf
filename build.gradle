buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
	}
}

plugins {
	id 'fabric-loom' version '0.5-SNAPSHOT'
	id 'maven-publish'
}
apply plugin: 'com.jfrog.bintray'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven {
		name 'JitPack'
		url 'https://jitpack.io'
	}
	jcenter()
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// ModMenu
	modImplementation "io.github.prospector:modmenu:${project.modmenu_version}"

	// Sodium
	modImplementation "com.github.jellysquid3:sodium-fabric:mc${project.sodium_version}"

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

bintray {
	user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
	key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_KEY')
	publications = ["mavenJava"]
	publish = false
	pkg {
		repo = 'maven'
		name = 'wdmcf'
		licenses = ['MIT']
		vcsUrl = 'https://github.com/ByMartrixx/wdmcf'
		version {
			released = new Date()
			githubRepo = 'ByMartrixx/wdmcf'
			websiteUrl = 'https://github.com/ByMartrixx/wdmcf'
			issueTrackerUrl = 'https://github.com/ByMartrixx/wdmcf/issues'
			vcsUrl = 'https://github.com/ByMartrixx/wdmcf'
			gpg {
				sign = true
			}
		}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(jar) {
				builtBy remapJar
			}
			artifact("${project.buildDir.absolutePath}/libs/${archivesBaseName}-${project.version}.jar") {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
			pom.withXml {
				def root = asNode()
				root.appendNode('description', 'A mod that makes Minecraft always print the exception to the console when the message "An unexpected error occurred trying to execute that command" is sent to the client.')
				root.appendNode('name', 'Why Did My Command Fail')
				root.appendNode('url', 'https://github.com/ByMartrixx/wdmcf')
			}
			groupId("${project.maven_group}")
			artifactId 'wdmcf'
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}
